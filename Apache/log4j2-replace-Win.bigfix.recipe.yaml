---
Description: Generates a BigFix Task for running the latest log4j2-scan
Identifier: com.github.jgstew.bigfix.log4j2-bin-Win64
Input:
  # Name: Short Name of the Software, No spaces, Example: "DBBrowserforSQLite"
  NAME: log4j2-scan
  DisplayName: log4j2-scan
  BESFileName: Log4j2 Remediation - Replace log4j-core-2.x.jar with log4j-core-2.17.0.jar - Universal
# MinimumVersion of AutoPkg - Should always be 2.3 (or higher once a new version is released)
MinimumVersion: "2.3"
ParentRecipe: com.github.jgstew.download.log4j2-bin
Process:
  # `SharedUtilityMethods` must come first
  - Processor: com.github.jgstew.SharedProcessors/SharedUtilityMethods
  # `BigFixPrefetchItem` takes the hashes from `URLDownloaderPython`
  #   Then it assembles them into a BigFix Prefetch Statement or Block
  - Processor: com.github.jgstew.SharedProcessors/BigFixPrefetchItem
    Arguments:
      prefetch_type: block

  # `BigFixSetupTemplateDictionary` creates a dictionary to fill out a bigix content template
  #   If `SourceReleaseDate` is not provided, it will be set to today
  - Processor: com.github.jgstew.SharedProcessors/BigFixSetupTemplateDictionary

  - Processor: com.github.jgstew.SharedProcessors/TemplateDictionaryAppendInput

  # TODO: expand the download and get sha1 of contained JAR
  - Processor: com.github.jgstew.SharedProcessors/FileGetExecutable
    Arguments:
      path_array: [
          # Exe in current directory:
          "7z",
          "7z.exe",
          # MacOS typical:
          # NONINTERACTIVE=1 brew install p7zip
          "/opt/homebrew/bin/7z",
          "/usr/local/bin/7z",
          # NONINTERACTIVE=1 brew install sevenzip
          "/usr/local/bin/7zz",
          # Ubuntu typical:
          # sudo apt-get install -y p7zip-full
          "/usr/bin/7z",
          # Windows typical:
          # choco install -y 7zip
          "/Program Files/7-Zip/7z.exe",
          "/Program Files (x86)/7-Zip/7z.exe",
        ]
  - Processor: com.github.hansen-m.SharedProcessors/WinInstallerExtractor
    Arguments:
      extract_dir: "ExtractedArchive"
      preserve_paths: False
  - Processor: com.github.jgstew.SharedProcessors/FileHasher
    Arguments:
      file_path: "%RECIPE_CACHE_DIR%/ExtractedArchive/log4j-core-%version%.jar"

  - Processor: com.github.jgstew.SharedProcessors/TemplateDictionaryAppend
    Arguments:
      append_key: "log4j-core-sha1"
      append_value: "%filehasher_sha1%"
  - Processor: com.github.jgstew.SharedProcessors/TemplateDictionaryAppend
    Arguments:
      append_key: "log4j-core-sha256"
      append_value: "%filehasher_sha256%"
  - Processor: com.github.jgstew.SharedProcessors/TemplateDictionaryAppend
    Arguments:
      append_key: "log4j-core-size"
      append_value: "%filehasher_size%"

  # `ContentFromTemplate` generates bigfix content from a mustache template file
  #   The file is filled out with variables from the Template Dictionary
  #   If variables are missing from the Template Dictionary, then that area will be blank
  - Processor: com.github.jgstew.SharedProcessors/ContentFromTemplate
    Arguments:
      template_file_path: "./%VendorFolder%/log4j2-replace-Win.bes.mustache"
      content_file_pathname: "%RECIPE_CACHE_DIR%/%BESFileName%.bes"

  # `BESImport` imports the generated BES content into a BigFix Server
  #   Which server and credentials are used is dictated by `~/.besapi.conf`
  - Processor: com.github.jgstew.SharedProcessors/BESImport

  # `BigFixActioner` creates an offer action from the imported BigFix Content
  - Processor: com.github.jgstew.SharedProcessors/BigFixActioner
