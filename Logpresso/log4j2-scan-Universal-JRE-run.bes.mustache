<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
  <{{TypeTaskOrFixlet}}{{^TypeTaskOrFixlet}}Task{{/TypeTaskOrFixlet}}>
    <Title>Run: {{DisplayName}} v{{version}} - Universal JAR - Download JRE{{#scan}} - SCAN only{{/scan}}{{#remediate}} - WITH REMEDIATION{{/remediate}}{{#undo-remediate}} - UNDO REMEDIATION{{/undo-remediate}}{{#communityversion}} - Community Version{{/communityversion}}</Title>
    <Description><![CDATA[
    {{#communityversion}}
		{{>Description-CommunityTestStatement}}
		</P>
		{{>Log4J2Scan-Description-Links}}
		</P>
    {{/communityversion}}
    {{^communityversion}}
    {{>Log4j2Scan-Description-OfficialVersion}}
    {{/communityversion}}
		{{#scan_or_remediate}}
		{{>Log4J2Scan-Description-ExclusionTable}}
		{{/scan_or_remediate}}
		</P>
		{{#remediate}}{{>Log4JScan-Description-Remediation}}{{/remediate}}
		{{#undo-remediate}}{{>Log4JScan-Description-Undo-Remediation}}{{/undo-remediate}}
		<P>
		<H3>NOTE:</H3> This version of the scan fixlet downloads the JAR version of {{DisplayName}} as well as a temporary Java Runtime from Adoptium/AdoptOpenJDK to execute the scanner.</P>
		]]>    </Description>
    <Relevance>if exists property "in proxy agent context" then not in proxy agent context else true</Relevance>
    <Relevance><![CDATA[( if (name of operating system as lowercase contains "win") then (version of operating system >= "6.3") else TRUE ) AND ( if (name of operating system as lowercase contains "linux") AND ((architecture of it = "s390x") of operating system OR (architecture of it = "ppc64") of operating system) then FALSE else TRUE ) AND (name of operating system does not start with "HP-UX")]]></Relevance>
		{{#undo-remediate}}<Relevance><![CDATA[exists find files "log4j2_scan_backup_*.zip" of folders "BPS-Scans" of parent folder of parent folder of client folder of site "actionsite"]]></Relevance> {{/undo-remediate}}
    <Category></Category>
    <DownloadSize>{{DownloadSize}}{{^DownloadSize}}0{{/DownloadSize}}</DownloadSize>
    <Source>{{DisplayName}}</Source>
    <SourceID></SourceID>
    <SourceReleaseDate>{{SourceReleaseDate}}</SourceReleaseDate>
    <SourceSeverity></SourceSeverity>
    <CVENames></CVENames>
    <SANSID></SANSID>
    <MIMEField>
      <Name>action-ui-metadata</Name>
      <Value>{ {{#version}}"version":"{{version}}",{{/version}}"size":{{DownloadSize}}{{^DownloadSize}}0{{/DownloadSize}}{{^patch}}{{#icon_base64}},"icon":"data:{{icon_type}}{{^icon_type}}image/png{{/icon_type}};base64,{{icon_base64}}"{{/icon_base64}}{{/patch}} }</Value>
    </MIMEField>
    <MIMEField>
      <Name>x-fixlet-modification-time</Name>
      <Value>{{x-fixlet-modification-time}}</Value>
    </MIMEField>
    <MIMEField>
      <Name>x-relevance-evaluation-period</Name>
      <Value>01:00:00</Value>
    </MIMEField>
    <Domain>BESC</Domain>
    <{{#scan}}DefaultAction{{/scan}}{{^scan}}Action{{/scan}} ID="Action1">
      <Description>
        <PreLink>Click </PreLink>
        <Link>here</Link>
        <PostLink> to run {{DisplayName}} v{{version}}.</PostLink>
      </Description>
      <ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
//parameter "exclusionlist" is provided in the Description tab
begin prefetch block
	// Download {{DisplayName}}:
	{{{prefetch}}}

	{{>ActionPrefetchBlockJRE}}
	collect prefetch items
end prefetch block

utility __Download/logpresso-log4j2-scan.jar
if {exists files "__Download\unzip.exe"}
  utility __Download/unzip.exe
endif
if {exists files "__Download\jre.zip"}
  utility __Download/jre.zip
endif
if {exists files "__Download/jre.tar.gz"}
  utility __Download/jre.tar.gz
endif

folder create "{pathname of parent folder of parent folder of client folder of site "actionsite"}/BPS-Scans"

// 'folder delete' fails in certain symlink situations - as used by some JREs.  Use OS commands rather than ActionScript to remove it.
//folder delete "{pathname of parent folder of parent folder of client folder of site "actionsite"}/BPS-Scans/jre"

folder create "{pathname of parent folder of parent folder of client folder of site "actionsite"}/BPS-Scans/jre"

parameter "BPSFolder"="{pathname of folder "BPS-Scans" of parent folder of parent folder of client folder of site "actionsite"}{if windows of operating system then "\" else "/"}"
parameter "JREFolder"="{pathname of folder "jre" of folder "BPS-Scans" of parent folder of parent folder of client folder of site "actionsite"}"
{{#scan_or_remediate}}
parameter "ListFile"="{parameter "BPSFolder"}results-log4j2-scan.txt"
parameter "ExclusionFile"="{parameter "BPSFolder"}log4j2-path-exclusions.txt"
parameter "ReportJSONFile"="{parameter "BPSFolder"}log4j2-report.json"
{{/scan_or_remediate}}
{{#undo-remediate}}
parameter "RestoreListFile"="{parameter "BPSFolder"}restore-log4j2-scan.txt"
{{/undo-remediate}}


// --- Begin JRE extraction
if {windows of operating system}
  waithidden __Download/unzip.exe -oq "__Download/jre.zip" -d "{parameter "JREFolder"}"
  delete "__Download/jre.zip"
  delete "__Download/unzip.exe"


else
  // Some UNIX versions require use of the shell to extract JRE, so shell must be known early
  // Get shell binary, should return /bin/sh in most cases:
  parameter "shell_bin" = "{  tuple string items 0 of concatenations ", " of ( pathnames of files "/bin/sh"; pathnames of files whose(name of it as lowercase = "sh" OR name of it as lowercase = "sh.exe") of (folders it) of unique values of (it as trimmed string) of substrings separated by (";";":") of values of (variables "PATH" of it ) of environments) }"

  // If script stops here, we did not find a shell
  continue if {parameter "shell_bin" as trimmed string != ""}

  parameter "tar"="{tuple string items 0 of concatenation ", " of pathnames of files "tar" of folders ("/bin";"/sbin";"/usr/sbin"; unique values of (it as trimmed string) of substrings separated by (";";":") of values of (variables "PATH" of it ) of environments)}"
  // If script stops here, we did not find a tar command
  continue if {parameter "tar" as trimmed string != ""}

  // Some UNIX flavors cannot decompress directly via tar, and need a gunzip or unzip command
  parameter "unzip"="{tuple string items 0 of concatenations ", " of pathnames of files ("gunzip"; "unzip") of folders ("/bin";"/usr/bin";unique values of (it as trimmed string) of substrings separated by (";";":") of values of (variables "PATH" of it ) of environments)}"


  if {exists match (regex "(AIX|AIX VIOS)") of name of operating system and (if exists property "current technology level" then current technology level of operating system >= "7100-04" else false)}
    // AIX extraction
	// If action stops here we may not have gunzip / unzip available

	continue if {parameter "unzip" as trimmed string != ""}

    wait {parameter "unzip"} "__Download/jre.tar.gz"
	wait {parameter "tar" } -xf "__Download/jre.tar" -C "{parameter "JREFolder"}"
	delete "__Download/jre.tar.gz"
	delete "__Download/jre.tar"

  elseif {exists match (regex "SunOS") of name of operating system}
    // SunOS extraction for i386 or Sparc
	// If action stops here we may not have gunzip / unzip available
	continue if {parameter "unzip" as trimmed string != ""}

	// SunOS version of tar does not support specifying output folder, so unzip in-place and then use shell redirection to relocate the untar
	wait {parameter "unzip"} "__Download/jre.tar.gz"
	wait {parameter "shell_bin"} -c "( cd '{parameter "BPSFolder"}jre' && tar xf - ) < __Download/jre.tar"
	delete "__Download/jre.tar.gz"
	delete "__Download/jre.tar"

  else
    // Unless otherwise specified, our UNIX/Linux variant version of 'tar' should support both decompress and output folder spec
    // extract temporary JRE
    wait {parameter "tar"} -xzvf "__Download/jre.tar.gz" -C "{parameter "JREFolder"}"
	delete "__Download/jre.tar.gz"
	delete "__Download/jre.tar"
  endif
endif


// --- End JRE extraction
//locate Java binary
// If script fails here, the JRE extraction may have failed.
parameter "Java_bin"="{tuple string item 0 of (concatenation ", " of pathnames of files ("java";"java.exe") of folders ("bin";"Contents/Home/bin") of (it; folders of it) of folders of folders (parameter "JREFolder"))}"
continue if {exists file (parameter "Java_bin")}

// Setup logpresso-log4j2-scan.jar
if { exists files "logpresso-log4j2-scan.jar" of folders (parameter "BPSFolder")}
  delete "{pathname of file "logpresso-log4j2-scan.jar" of folder (parameter "BPSFolder")}"

endif

// Copy the scanner JAR file to client folder
copy __Download/logpresso-log4j2-scan.jar "{parameter "BPSFolder"}/logpresso-log4j2-scan.jar"

{{#scan_or_remediate}}{{>Log4J2Scan-Action-ExcludeList}}{{/scan_or_remediate}}

if {windows of operating system}
  // Execute scan
  {{#scan_or_remediate}}
  delete "{parameter "ReportJSONFile"}"
  runhidden cmd.exe /c "cd "{parameter "BPSFolder"}" & "{parameter "Java_bin"}" -jar .\logpresso-log4j2-scan.jar --silent --all-drives --scan-log4j1 --no-symlink --no-empty-report --exclude-fs nfs,nfs3,nfs4,cifs,tmpfs,devtmpfs,iso9660,autofs,afs --exclude-config "{parameter "ExclusionFile"}" --report-json --report-path "{parameter "ReportJSONFile"}" {{remediate}} > "{parameter "ListFile"}" & rd /s /q "{parameter "JREFolder"}""
  {{/scan_or_remediate}}
  {{#undo-remediate}}
  delete __appendfile
  appendfile cd "{parameter "BPSFolder"}"
  appendfile del /q "{parameter "RestoreListFile"}"
  appendfile {concatenation "%0d%0a" of ("%22" & parameter "Java_bin" & "%22 -jar %22" & parameter "BPSFolder" & "logpresso-log4j2-scan.jar%22  --restore %22" & it & "%22 >> %22" & parameter "RestoreListFile" & "%22 2>&1"; "echo move /Y %22" & it & "%22 %22" & it & ".restored%22") of pathnames of find files "log4j2_scan_backup_*.zip" of folders (parameter "BPSFolder")}
  appendfile rd /s /q "{parameter "JREFolder"}"

  delete log4j-restore.cmd
  move __appendfile log4j-restore.cmd
  waithidden cmd.exe /c log4j-restore.cmd

  {{/undo-remediate}}
else
  {{#scan_or_remediate}}
  // Run log4j2-scan scan or remediation:
  // WARNING: this attempts to exclude network shares, but might not be perfect.
  delete "{parameter "ReportJSONFile"}"
  run {parameter "shell_bin"} -c "cd '{parameter "BPSFolder"}' ; '{parameter "Java_bin"}' -jar ./logpresso-log4j2-scan.jar --silent --scan-log4j1 --no-symlink --no-empty-report --exclude-fs nfs,nfs3,nfs4,cifs,tmpfs,devtmpfs,iso9660,autofs,afs --exclude-config '{parameter "ExclusionFile"}' --report-json --report-path '{parameter "ReportJSONFile"}' {{remediate}} /  > '{parameter "ListFile"}' ; rm -rf '{parameter "JREFolder"}'"
  {{/scan_or_remediate}}
  {{#undo-remediate}}
  delete __appendfile
  appendfile #!/bin/sh
  appendfile cd '{parameter "BPSFolder"}'
  appendfile rm -f "{parameter "RestoreListFile"}"
  appendfile {concatenation "%0a" of ("%22" & parameter "Java_bin" & "%22 -jar %22" & parameter "BPSFolder" & "logpresso-log4j2-scan.jar%22  --restore %22" & it & "%22 >> %22" & parameter "RestoreListFile" & "%22 2>&1 "; "echo mv -f %22" & it & "%22 %22" & it & ".restored%22") of pathnames of find files "log4j2_scan_backup_*.zip" of folders (parameter "BPSFolder")}
  appendfile rm -rf '{parameter "JREFolder"}'
  delete log4j-restore.sh
  move __appendfile log4j-restore.sh
  wait chmod +x log4j-restore.sh
  wait {parameter "shell_bin"} ./log4j-restore.sh
  {{/undo-remediate}}
endif


{{#scan_or_remediate}}
// Wait up to 30 seconds for the logfile to be created to check successful startup
parameter "StartTime"="{now}"
pause while {not exists file (parameter "ListFile") and now - (parameter "StartTime" as time) < 30 * second }
// Check that an output log file has been created as an indicator that the scan has launched successfully
continue if {exists file (parameter "ListFile") whose (modification time of it >= active start time of action)}
{{#remediate}}
action requires restart
{{/remediate}}
{{/scan_or_remediate}}
{{#undo-remediate}}
continue if {exists file (parameter "RestoreListFile") whose (modification time of it >= active start time of action)}
action requires restart
{{/undo-remediate}}

// End]]></ActionScript>
    </{{#scan}}DefaultAction{{/scan}}{{^scan}}Action{{/scan}}>
  </{{TypeTaskOrFixlet}}{{^TypeTaskOrFixlet}}Task{{/TypeTaskOrFixlet}}>
</BES>
